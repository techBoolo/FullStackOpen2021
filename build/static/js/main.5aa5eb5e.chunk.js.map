{"version":3,"sources":["components/Filter.js","components/PersonForm.js","services/phonebook.js","components/People.js","components/Notification.js","App.js","index.js"],"names":["Filter","searchTerm","searchPeople","value","onChange","PersonForm","props","handleSubmit","name","number","handleNameChange","handleNumberChange","onSubmit","type","url","People","people","setPeople","setMessage","handleDelete","id","window","confirm","axios","delete","then","response","data","remove","filter","person","catch","error","message","messageType","setTimeout","map","onClick","Notification","className","App","useState","setName","setNumber","setSearchTerm","filteredPeople","setFilteredPeople","processName","split","join","trim","useEffect","toLowerCase","includes","get","initialPeople","ev","target","preventDefault","find","put","peopleService","updatedPerson","p","newPerson","post","createdPerson","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aa5eb5e.chunk.js","sourcesContent":["const Filter = ({ searchTerm, searchPeople }) => {\n\n  return (\n    <>\n      S: <input value={searchTerm} onChange={searchPeople} />\n    </>\n  );\n};\n\nexport default Filter;\n","const PersonForm = (props) => {\n  const { handleSubmit, name, number, handleNameChange, handleNumberChange } = props;\n  return (\n    <form onSubmit={handleSubmit}>\n      N: <input value={name} onChange={handleNameChange} /><br />\n      Nu: <input value={number} onChange={handleNumberChange} /><br />\n      <button type='submit'>add</button>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import axios from 'axios';\n\nconst url = 'http://localhost:3001/api/people'\n\nexport const getAll = () => {\n  return axios.get(url)\n    .then(response => {\n      return response.data\n    })\n}\n\nexport const create = (newPerson) => {\n  return axios.post(url, newPerson)\n    .then(response => {\n      return response.data\n    })\n}\n\nexport const remove = (id) => {\n  return axios.delete(`${url}/${id}`)\n    .then(response => {\n      return response.data\n    })\n}\n\nexport const update = (person) => {\n  const id = person.id\n  return axios.put(`${url}/${id}`, person)\n    .then(response => {\n      return response.data\n    })\n}\n","import { remove } from '../services/phonebook';\n\nconst People = ({ people, setPeople, setMessage }) => {\n  const handleDelete = (id) => {\n    const confirmation = window.confirm(\"Are you user?\");\n    if(confirmation){\n      remove(id)\n        .then(() => {\n          setPeople(people.filter(person => person.id !== id)) \n        })\n        .catch(error => {\n          setMessage({ message: 'person does note exist in the phonebook', messageType: 'error' });\n          setTimeout(() => setMessage({}), 4000);\n        })\n    }else {\n      return\n    }\n  }\n  return (\n    <ul>\n      {\n        people.map(person => <li key={person.name}>{person.name} {person.number}\n            <button onClick={() => handleDelete(person.id)}>delete</button>\n            </li>)\n      } \n    </ul>\n  );\n};\nexport default People;\n","const Notification = ({message}) => {\n  if(!message.message) return null\n  return (\n    <div className={`message ${message.messageType}`}>\n      { message.message } \n    </div>\n  );\n};\n\nexport default Notification;\n","import { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport People from './components/People';\nimport * as peopleService from './services/phonebook'\nimport Notification from './components/Notification';\nimport './App.css';\n\nfunction App() {\n  const [ people, setPeople ] = useState([])\n  const [ name, setName ] = useState('');\n  const [ number, setNumber ] = useState('');\n  const [ searchTerm, setSearchTerm ] = useState('');\n  const [ filteredPeople, setFilteredPeople ] = useState([]);\n  const [ message, setMessage ] = useState({});\n\n  const processName = (name) => {\n    return name.split(/\\s+/).join(' ').trim();\n  }\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    let person = people.find(person => processName(person.name).toLowerCase() === processName(name).toLowerCase());\n    if(person){\n      const confirmation = window.confirm(`${name} is already added to phonebook want to change the number?`)\n      if(confirmation) {\n        person = {...person, number: number }\n        peopleService\n          .update(person)\n          .then(updatedPerson => {\n            setPeople(people.map(p => p.id !== updatedPerson.id ? p : updatedPerson))               \n          })\n        setMessage({ message: 'phonebook updated.', messageType: 'success' })\n        setTimeout(() => { setMessage({})}, 4000)\n        setName('');\n        setNumber('');\n      }else {\n        return\n      }\n    }else{ \n      const newPerson = {\n        name: processName(name),\n        number\n      }\n      peopleService\n        .create(newPerson)\n        .then(createdPerson => {\n          setPeople([...people, createdPerson])\n          setMessage({ message: 'new person added.', messageType: 'success' })\n          setTimeout(() => { setMessage({})}, 4000)\n          setName('');\n          setNumber('');\n        })\n    }\n  }\n  const handleNameChange = (ev) => {\n    setName(ev.target.value); \n  }\n  const handleNumberChange = (ev) => {\n    setNumber(ev.target.value); \n  }\n\n  const searchPeople = (ev) => {\n    setSearchTerm(ev.target.value);\n  }\n  \n  useEffect(() => {\n    setFilteredPeople(people.filter(person => processName(person.name).toLowerCase().includes(processName(searchTerm).toLowerCase()))) \n  }, [searchTerm, people])\n\n  useEffect(() => {\n    peopleService\n      .getAll()\n      .then(initialPeople => {\n        setPeople(initialPeople); \n      })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Notification message={message} />\n      <h4>Pb</h4>\n        <Filter searchTerm={searchTerm} searchPeople={searchPeople} />\n      <h4>Add new</h4>\n        <PersonForm \n          handleSubmit={handleSubmit} \n          name={name} \n          number={number} \n          handleNameChange={handleNameChange} \n          handleNumberChange={handleNumberChange} />\n      <h4>Nu</h4>\n        <People people={filteredPeople} setPeople={setPeople} setMessage={setMessage} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}